// Code generated by MockGen. DO NOT EDIT.
// Source: getir-assignment/internal/record (interfaces: RecordService)

// Package mocks is a generated GoMock package.
package mocks

import (
	record "getir-assignment/internal/record"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRecordService is a mock of RecordService interface.
type MockRecordService struct {
	ctrl     *gomock.Controller
	recorder *MockRecordServiceMockRecorder
}

// MockRecordServiceMockRecorder is the mock recorder for MockRecordService.
type MockRecordServiceMockRecorder struct {
	mock *MockRecordService
}

// NewMockRecordService creates a new mock instance.
func NewMockRecordService(ctrl *gomock.Controller) *MockRecordService {
	mock := &MockRecordService{ctrl: ctrl}
	mock.recorder = &MockRecordServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRecordService) EXPECT() *MockRecordServiceMockRecorder {
	return m.recorder
}

// GetRecordsByDateAndCount mocks base method.
func (m *MockRecordService) GetRecordsByDateAndCount(arg0 record.RecordRequest) ([]*record.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecordsByDateAndCount", arg0)
	ret0, _ := ret[0].([]*record.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecordsByDateAndCount indicates an expected call of GetRecordsByDateAndCount.
func (mr *MockRecordServiceMockRecorder) GetRecordsByDateAndCount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecordsByDateAndCount", reflect.TypeOf((*MockRecordService)(nil).GetRecordsByDateAndCount), arg0)
}
