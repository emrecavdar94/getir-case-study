// Code generated by MockGen. DO NOT EDIT.
// Source: getir-assignment/internal/in_memory (interfaces: MemoryService)

// Package mocks is a generated GoMock package.
package mocks

import (
	inmemory "getir-assignment/internal/in_memory"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMemoryService is a mock of MemoryService interface.
type MockMemoryService struct {
	ctrl     *gomock.Controller
	recorder *MockMemoryServiceMockRecorder
}

// MockMemoryServiceMockRecorder is the mock recorder for MockMemoryService.
type MockMemoryServiceMockRecorder struct {
	mock *MockMemoryService
}

// NewMockMemoryService creates a new mock instance.
func NewMockMemoryService(ctrl *gomock.Controller) *MockMemoryService {
	mock := &MockMemoryService{ctrl: ctrl}
	mock.recorder = &MockMemoryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMemoryService) EXPECT() *MockMemoryServiceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockMemoryService) Get(arg0 string) (*inmemory.InMemory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*inmemory.InMemory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockMemoryServiceMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMemoryService)(nil).Get), arg0)
}

// Set mocks base method.
func (m *MockMemoryService) Set(arg0, arg1 string) (*inmemory.InMemory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1)
	ret0, _ := ret[0].(*inmemory.InMemory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Set indicates an expected call of Set.
func (mr *MockMemoryServiceMockRecorder) Set(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockMemoryService)(nil).Set), arg0, arg1)
}
